local peripheral, fs, textutils, math, term, os = 
      peripheral, fs, textutils, math, term, os

local oldPullEvent = os.pullEvent
os.pullEvent = os.pullEventRaw

local settings = {
  activateAt = 0.3,
  deactivateAt = 0.9,
  maxStored = 10e6
}

rednet.open("left")
rednet.host("power", "main")

local bank = peripheral.wrap("tile_blockcapacitorbank_name_0")
local reactor = peripheral.wrap("right")
local monitor = peripheral.wrap("front")
monitor.setBackgroundColor(colors.black)
monitor.clear()
monitor.setTextScale(0.5)
local w, h = monitor.getSize()
term.redirect(monitor)

local production = 0
local current = 0
local charge = false

local moving = 0 -- 0=none, 1=green marker, 2=red marker

local settingsPath = "data/settings"

local function saveSettings()
  local f = fs.open(settingsPath, "w")
  if not f then return false end
  f.write(textutils.serialize(settings))
  f.close()
  return true
end

local function loadSettings()
  if not fs.exists(settingsPath) or fs.isDir(settingsPath) then return false end
  local f = fs.open(settingsPath, "r")
  settings = textutils.unserialize(f.readAll())
  f.close()
  return true
end

local function drawRect(x1, y1, x2, y2, color)
  term.setBackgroundColor(color)
  for y=y1, y2 do
    term.setCursorPos(x1, y)
    write(string.rep(" ", x2-x1+1))
  end
end

local function numToString(n)
  local sufix = {"", "k", "M", "G", "T", "P"}
  local a = 1
  while n>1000 do n = n/1000; a=a+1 end
  return (math.floor(n*10)/10)..(sufix[a] or "?")
end

local function explode(self, sep)
  local sep, fields = sep or ":", {}
  local pattern = string.format("([^%s]+)", sep)
  self:gsub(pattern, function(c) fields[#fields+1] = c end)
  return fields
end

local function readReactor()
  current = reactor.getEnergyStored()
  production = reactor.getEnergyProducedLastTick()
end

local function drawBar()
  drawRect(w-8, 2, w-2, h-1, colors.gray)
  local level = (h-2)*current/settings.maxStored
  drawRect(w-8, h-math.floor(level), w-2, h-1, charge and colors.yellow or colors.lime)
  if level-math.floor(level)>=0.5 then
    drawRect(w-8, h-1-math.floor(level), w-2, h-1-math.floor(level), charge and colors.brown or colors.green)
  end
  term.setBackgroundColor(colors.black)
  term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.activateAt))
  term.setTextColor(colors.lime)
  write(moving==1 and "#" or "<")
  term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.deactivateAt))
  term.setTextColor(colors.red)
  write(moving==2 and "#" or "<")
end

local function drawInfo()
  term.setTextColor(colors.yellow)
  term.setBackgroundColor(colors.black)
  term.setCursorPos(2, 2)
  write("Status: "..(charge and "ON " or "OFF"))
  term.setCursorPos(2, 4)
  write("Power: "..(math.floor(1000*current/settings.maxStored)/10).."%    ")
  term.setCursorPos(2, 6)
  local str = numToString(production)
  write("Production: "..str.."RF/t"..string.rep(" ", 5-#str))
  term.setCursorPos(2, 8)
  write("Capacitor: "..(math.floor(1000*bank.getEnergyStored()/bank.getMaxEnergyStored())/10).."%    ")
end

local function doStuff()
  local p = current/settings.maxStored

  if charge and p>=settings.deactivateAt then
    charge = false
  end
  if not charge and p<=settings.activateAt then
    charge = true
  end

  if charge and not reactor.getActive() then
    reactor.setActive(true)
  end
  if not charge and reactor.getActive() then
    reactor.setActive(false)
  end
end

local function adjust(a, n)
  term.setBackgroundColor(colors.black)
  if a then
    term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.activateAt))
    settings.activateAt = n
  else
    term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.deactivateAt))
    settings.deactivateAt = n
  end
  write(" ")
  saveSettings()
end

loadSettings()

os.startTimer(0.5)
while true do
  local e = {os.pullEvent()}
  if e[1]=="timer" then
    readReactor()
    doStuff()
    drawInfo()
    drawBar()
    os.startTimer(0.5)
  elseif e[1]=="terminate" then
    break
  elseif e[1]=="monitor_touch" then
    if e[3]==w then
      local p = h-1-e[4]
      if moving==0 then
        if math.abs(p-settings.activateAt*(h-2))<=1 then
          moving = 1
        elseif math.abs(p-settings.deactivateAt*(h-2))<=1 then
          moving = 2
        end
      elseif moving==1 then
        adjust(true, p/(h-2))
        moving = 0
      else
        adjust(false, p/(h-2))
        moving = 0
      end
    end
  elseif e[1]=="rednet_message" and e[4]=="power" then
    local args = explode(e[3], ";")
    if args[1]=="summary" then
      rednet.send(e[2], "Status: "..(charge and "ON" or "OFF")
        .."\nPower: "..(math.floor(1000*current/settings.maxStored)/10).."%"
        .."\nProduction: "..numToString(production).."RF/t", "power")
    elseif args[1]=="adjust" and args[2]=="activate" then
      local n = tonumber(args[3])
      if n and n>=0 and n<=1 then
        adjust(true, n)
        rednet.send(e[2], "Adjusted.", "power")
      else
        rednet.send(e[2], "Invalid argument. (0 <= n <= 1)", "power")
      end
    elseif args[1]=="adjust" and args[2]=="deactivate" then
      local n = tonumber(args[3])
      if n and n>=0 and n<=1 then
        adjust(false, n)
        rednet.send(e[2], "Adjusted.", "power")
      else
        rednet.send(e[2], "Invalid argument. (0 <= n <= 1)", "power")
      end
      rednet.send(e[2], "Adjusted.", "power")
    else
      rednet.send(e[2], "Invalid argument", "power")
    end
  end
end

os.pullEvent = oldPullEvent