local peripheral, fs, textutils, math = 
      peripheral, fs, textutils, math

local settings = {
  activateAt = 0.3,
  deactivateAt = 0.9,
  maxStored = 10e6
}

local reactor = peripheral.wrap("right")
local monitor = peripheral.wrap("front")
monitor.setBackgroundColor(colors.black)
monitor.clear()
monitor.setTextScale(0.5)
local w, h = monitor.getSize()
term.redirect(monitor)

local production = 0
local current = 0
local charge = false

local settingsPath = "data/settings"

local function saveSettings()
  local f = fs.open(settingsPath, "w")
  if not f then return false end
  f.write(textutils.serialize(state))
  f.close()
  return true
end

local function loadSettings()
  if not fs.exists(settingsPath) or fs.isDir(settingsPath) then return false end
  local f = fs.open(settingsPath, "r")
  settings = textutils.unserialize(f.readAll())
  f.close()
  return true
end

local function drawRect(x1, y1, x2, y2, color)
  term.setBackgroundColor(color)
  for y=y1, y2 do
    term.setCursorPos(x1, y)
    write(string.rep(" ", x2-x1))
  end
end

local function readReactor()
  current = reactor.getEnergyStored()
  production = reactor.getEnergyProducedLastTick()
end

local function drawBar()
  drawRect(w-8, 2, w-2, h-1, colors.gray)
  local level = (w-2)*current/settings.maxStored
  drawRect(w-8, h-math.floor(level), w-2, h-1, charge and colors.yellow or colors.lime)
  if level-math.floor(level)>=0.5 then
    drawRect(w-8, h-1-math.floor(level), w-2, h-1-math.floor(level), charge and colors.brown or colors.green)
  end
  term.setBackgroundColor(colors.black)
  term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.activateAt))
  term.setTextColor(colors.lime)
  write("<")
  term.setCursorPos(w-1, h-1-math.floor((h-2)*settings.deactivateAt))
  term.setTextColor(colors.red)
  write("<")
end

local function doStuff()
  local p = current/settings.maxStored

  if charge and p>=settings.deactivateAt then
    charge = false
  end
  if not charge and p<=settings.activateAt then
    charge = true
  end

  if charge and not reactor.getActive() then
    reactor.setActive(true)
  end
  if not charge and reactor.getActive() then
    reactor.setActive(false)
  end
end

loadSettings()

while true do
  readReactor()
  doStuff()
  drawBar()

  sleep(0.5)
end